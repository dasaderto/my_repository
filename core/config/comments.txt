script.js

Превышение размера загружаемого файла 20 мб вывод ошибки
При нажатии на кнопку "Загрузить" высвечивается уведомление о загрузке
При регистрации данные отправляются на сервер AJAX запросом. Возвратные данные либо да либо нет. при отказе кнопка регистрации блокируется, при удаче страница обновится через полторы секунды после вывода уведомления.
При входе, данные отправляются на AuthController, там производится вход, при отказе, вывод уведомления
При загрузке данных пользователя для управления данными, проверка поля на правильность ввода, кнопки заблокированны. При удаче, отправка запроса с userdata на AJAXСontroller получение и обработка ответа, блокировка полей, или же их разблокировка. id пользователя статичный и хранится в глобале
При редактировании данных пользователя в работе с ролями, получение изменяемых данных, и уведомление о желании редактирования, после чего отправляется запрос в AuthController, и проверка на существование логина в случае его изменения, при положительном ответе, отправка данных на AJAX Controller, обновление и возврат ответа, при успехе или неудаче, все поля снова блокируются, кнопки тоже.
При удалении данных при работе с ролями пользователей, уведомление о уверенности удаления данных, и отправка данных на AJAXController, получение ответа, поля и кнопки также блокируются.
При изменении полей, ошибка сбрасывается под логином. 
При отпускании клавиши когда изменяется логин в ролях пользователей, блокируются все кнопки и поля.
При регистрации, вводе логина, данные отправляются на тест, и сверяются с существующими логинами, и отправляются на проверку снятия дизейбла с кнопки "Зарегистрировать"
Аналогичные действия с паролем и повторным вводом пароля.
ButtonOnOff() проверяет что сообщения об ошибках пусты, и поля с логином и паролями соответствуют требованиям, в случае успеха, снятие дизейбла с кнопки "Зарегистрировать"
testLogin() проверка на различные ошибки в логине, и сверка с существующими для целостности.
checkPassword аналогично, и в конце проверка на сложность пароля, в случае успеха, возврат true.
При добавлении обучающихся для отчетности, простая проверка на заполненность полей, чтобы соответствовали классы и т.д. отправка данных на AJAXController, в случае успеха значения обнуляются ,и вывод уведомления.
При удалении обучающихся для отчетности, аналогичные действия, только amount отправляется c минусом.
watchhref предназначен для создания просмотров, при клике на чтение онлайн, или скачивании файлов, отправляется паршеный запрос, и добавляется просмотр к книге.
getUrlVars() парсит URI ссылки, не использовать с ЧПУ, рабботать не будет.
Генератор генерирует логин и пароли, при попытке изменения паролей, их тип снова становится password. При генерации, логин проверяется на валидность и нужно еще раз генернуть чтоб пропали уведомления, бывает западает. Проверка пароля и снятие дизейбла с сгенерированных регистрационных данных.
add_work добавляет книги для отчетности и отправляет данные на AJAXController
randomString рандомит значения для генератора.
footerToBottom, много запарок и легче просто рассчитывать высоту и прижимать footer туда.

paginate.js

Задание лимита вывода, вызов callJSON для парсинга JSON файла и создания пагинации
returnData() используется при сортировке по Авторам, получает различные значения, реплейсит пробелы и точки, и отправляет запрос на контроллер, после чего вызывает парсер.
пользовательские функции для енкода и пагинации.
bootpag не работает для первой страницы поэтому в callJSON cначала загружаются начальные данные, затем дублируются в пагинации.
Рассчитываются стартовые позиции, лимиты, и через JQUERY данные загружаются на страницу.

AdminModel.php

getUser() просто получение запросом данных первого попавшегося логина, и возврат в контроллер
editUser() обновление данных SQL запросом, и в случае ошибки false в контроллер или же true
deleteUser() удаление данных SQL запросом, и в случае ошибки false в контроллер или же true
addStudent() Проверка количества обучающихся и добавление студентов, если ответ меньше нуля или же пустой, возврат false в контроллер, в противном случае обновление количества студентов, снова получение данных по id и обновление таблицы с учебниками на количество учеников и возврат true в контроллер
addWorkbook() Получение дданных из книг, если книга с такимже автором, предметом и классом не существует она добавляется через INSERT, в противном случае обновляется через UPDATE и замещает старые данные. Отправка ответа в контроллер
updateData() метод не в ходу, не осталось времени для подключения, метод переносит учеников на год вперед, удаляет устаревшие книги.
takeReport() получает данные из учебников для таблицы заказа учебников.
takeUsers() получает данные из пользователей для таблицы пользователей.
download() получает данные о книге из контроллера, добавляет сгенерированные символы к названию картинки и книги и загружает через bean

AuthModel.php

Registration() Проверка пользовательских данных регулярками на корректность и добавление в БД через bean, если не работает, просто проверку регулярок убрать.
Login() ПРоверка в БД и запуск сессии, стандартные действия.
testlogin() Проверка роли, проверка логина на существование, и исключение ролевого пользователя, процедура вызывается при попытке изменения логина в работе с ролями, и при регистрации.

ContentModel.php

BookOnIndex() выбор 10 популярных книг из выбранной таблицы и возврат для главной страницы
ShowMenu() Получает общее категорию и класс из books, если пользователь зарегистрирован, данные получаются и из techniques, после чего массивы соединяются и упрощаются в цикле.
updateViews() вызывается при чтении онлайн или скачивании пособия, добавляется просмотр книге.
getAuthor(),ShowAuthors() работа с выводом данных авторов в разные случаи.
categoryname() получение тайтлов для различных страниц категорий, метод нужен для пагинации без аякса.
detailsBook() получение и вывод данных о книге. страница деталей. На ней же расчет типа файла, ссылки, и размера файла.

PagginateModel.php

в конструкторе присваиваются и получаются значения.
paggination() получает данные для сортировки и вызывает метод QueryController, который распознает какой метод уже нужно вызывать, методы отвечаются за поиск,стандартная пагинация, пагинация жанров, авторов и т.д.
printPages i parseURI нужны для пагинации без аякса. 

Контроллеры простые, просто получение данных и отправка в модели, вывод

templates
header везде подключается одинаковый, 
sidebar для всех страниц
asidebar для страниц админки. 
head подключается везде, в случае если нужна работа с таблицами как в заказе учебников, подрубается ahead
футеры почти одинаковые.

в htaccess прописаны все ЧПУ, все работают, но загнется сайт из за аяксовых запросов, так как парс идет без чпу. 